import cv2
import numpy as np

# 边缘检测
# 边缘检测是计算机视觉中的常见任务，它可以用来识别图像中的物体。Canny边缘检测是一种常用的边缘检测算法，OpenCV中可以使用cv2.Canny()函数来进行Canny边缘检测。
# https://zhuanlan.zhihu.com/p/651610886
# 载入图像
img = cv2.imread('2\\1.png', 0)

for i in range(200, 250):
    # 进行Canny边缘检测
    edges = cv2.Canny(img, i, 100 + i)

    # 显示处理结果
    # cv2.imshow('edges', edges)
    # cv2.imshow('img', img)
    # 保存成为图片
    saveStr = "C:\\Users\\Administrator\\Desktop\\output\\" + str(i) + ".png"

    #cv2.imwrite(saveStr, edges)
cv2.waitKey(0)
cv2.destroyAllWindows()
# 图像金字塔
# 一般情况下，我们要处理是一副具有固定分辨率的图像。但是有些情况下， 我们需要对同一图像的不同分辨率的子图像进行处理。
# 比如，我们要在一幅图 像中查找某个目标，比如脸，我们不知道目标在图像中的尺寸大小。这种情况 下，我们需要创建创建一组图像，这些图像是具有不同分辨率的原始图像
# 我 们把这组图像叫做图像金字塔（简单来说就是同一图像的不同分辨率的子图集 合）。如果我们把最大的图像放在底部，最小的放在顶部，看起来像一座金字塔，故而得名图像金字塔。
#
# 有两类图像金字塔：高斯金字塔和拉普拉斯金字塔。
#
# 高斯金字塔的顶部是通过将底部图像中的连续的行和列去除得到的。顶部图像中的每个像素值等于下一层图像中 5 个像素的高斯加权平均值。这样操作一次一个M x N的图像就变成了一个M/2 x N/2 的图像。所以这幅图像的面积就变为原来图像面积的四分之一。
#
# 2.1 高斯金字塔
# 向下采样方法（缩小）
#
#
# 将与高斯内核卷积
# 将所有偶数行和列去除
# 向上采样方法（放大）
# 通过下列图像进行代码操作示例：
#
# 原图像大小为（442，340，3）
#
# img = cv2.imread('.jpg')
#
# # 上采样
# up = cv2.pyrUp(img)
#
# # 下采样
# down = cv2.pyrDown(img)
# 分别进行上采样和下采样原图像大小分别变为如下：
#
# （884，680，3）和（221，170，3）
#
# 使用cv2.pyrDown()，图像的分辨率就会降低，信息就会被丢失。
